{"version":3,"file":"script.js","sourceRoot":"","sources":["../src/scripts/Helpers/Random.ts","../src/scripts/Engine/MapCoordinates.ts","../src/scripts/GameObjects/GameObject.ts","../src/scripts/GameObjects/Box.ts","../src/scripts/DataStructure/BinaryTree/BinaryTreeNode.ts","../src/scripts/DataStructure/BinaryTree/BinaryTree.ts","../src/scripts/Environment/GameObjectCollection.ts","../src/scripts/Environment/Field.ts","../src/scripts/GlobalVariables.ts","../src/scripts/GameObjects/Player.ts","../src/scripts/Engine/ControlManager.ts","../src/scripts/Engine/PathNode.ts","../src/scripts/DataStructure/ArrayBinaryTree/ArrayBinaryTreeNode.ts","../src/scripts/DataStructure/ArrayBinaryTree/ArrayBinaryTree.ts","../src/scripts/Engine/PathFinder.ts","../src/scripts/GameObjects/DeadMan.ts","../src/scripts/GameObjects/Enemy.ts","../src/scripts/Engine/Game.ts","../src/scripts/EntryPoint.ts","../src/scripts/GameObjects/Track.ts","../src/scripts/Helpers/Sleep.ts","../src/scripts/Helpers/StopWatch.ts"],"names":[],"mappings":"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","sourcesContent":["class Random {\r\n    public static next(min:number, max:number) {\r\n        return Math.round(Math.random() * (max - min)) + min;\r\n    }\r\n}\r\n\r\nexport default Random;","class MapCoordinates {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    public constructor (x: number, y:number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    public toString() {\r\n        return this.x.toString() + \",\" + this.y.toString();\r\n    }\r\n}\r\n\r\nexport default MapCoordinates;","import MapCoordinates from \"../Engine/MapCoordinates\";\r\n\r\nabstract class GameObject {\r\n    coordinates: MapCoordinates;\r\n    color: string;\r\n    isImpenetrable: boolean;\r\n}\r\n\r\nexport default GameObject;","import MapCoordinates from \"../Engine/MapCoordinates\";\r\nimport GameObject from \"./GameObject\";\r\n\r\nclass Box implements GameObject {\r\n    public coordinates: MapCoordinates;\r\n    public color: string = \"black\";\r\n    public isImpenetrable: boolean = false;\r\n\r\n    constructor(coordinates: MapCoordinates) {\r\n        this.coordinates = coordinates;\r\n    }\r\n}\r\n\r\nexport default Box;","class BinaryTreeNode<T> {\r\n    private key: number;\r\n    private value: T;\r\n    private parent: BinaryTreeNode<T>;\r\n    private left: BinaryTreeNode<T>;\r\n    private right: BinaryTreeNode<T>;\r\n\r\n    public constructor(argument: T, parent: BinaryTreeNode<T>, key: number) {\r\n        this.value = argument;\r\n        this.parent = parent;\r\n        this.key = key;\r\n    }\r\n\r\n    public getParent(): BinaryTreeNode<T> {\r\n        return this.parent;\r\n    }\r\n\r\n    public  getKey(): number {\r\n        return this.key;\r\n    }\r\n\r\n    public setParent(parent: BinaryTreeNode<T>) {\r\n        this.parent = parent;\r\n    }\r\n\r\n    public setLeft(argument: BinaryTreeNode<T>) {\r\n        this.left = argument;\r\n    }\r\n\r\n    public setRight(argument: BinaryTreeNode<T>) {\r\n        this.right = argument;\r\n    }\r\n\r\n    public getRight(): BinaryTreeNode<T> {\r\n        return this.right;\r\n    }\r\n\r\n    public getLeft(): BinaryTreeNode<T> {\r\n        return this.left;\r\n    }\r\n\r\n    public getValue(): T {\r\n        return this.value;\r\n    }\r\n\r\n    public setValue(value: T) {\r\n        this.value = value;\r\n    }\r\n\r\n    public setKey(value: number) {\r\n        this.key = value;\r\n    }\r\n\r\n}\r\n\r\nexport default BinaryTreeNode;","import BinaryTreeNode from \"./BinaryTreeNode\";\r\n\r\nclass BinaryTree<T> implements Iterable<BinaryTreeNode<T>> {\r\n    public firstItem: BinaryTreeNode<T>;\r\n    private comparableValue: (T: T) => number;\r\n\r\n    public constructor(argument: T, func: (T: T) => number) {\r\n        this.comparableValue = func;\r\n        if (argument != null)\r\n            this.firstItem = new BinaryTreeNode<T>(argument, null, this.comparableValue(argument));\r\n    }\r\n\r\n    public add(argument: T) {\r\n        let argumentComparableValue = this.comparableValue(argument);\r\n        if (this.firstItem == null || this.firstItem == undefined) {\r\n            this.firstItem = new BinaryTreeNode<T>(argument, null, argumentComparableValue);\r\n            return;\r\n        }\r\n        let parentNode: BinaryTreeNode<T> = this.firstItem;\r\n        while (true) {\r\n            if (parentNode.getKey() > argumentComparableValue) {\r\n                if (parentNode.getLeft() == null) {\r\n                    parentNode.setLeft(new BinaryTreeNode<T>(argument, parentNode, argumentComparableValue));\r\n                    break;\r\n                }\r\n                else {\r\n                    parentNode = parentNode.getLeft();\r\n                }\r\n            }\r\n            else if (parentNode.getKey() < argumentComparableValue) {\r\n                if (parentNode.getRight() == null) {\r\n                    parentNode.setRight(new BinaryTreeNode<T>(argument, parentNode, argumentComparableValue));\r\n                    break;\r\n                }\r\n                else {\r\n                    parentNode = parentNode.getRight();\r\n                }\r\n            } else {\r\n                throw \"added value with exist key \" + argumentComparableValue;\r\n            }\r\n        }\r\n    }\r\n\r\n    private arrayOfElements: T[];\r\n\r\n    public toArray(): T[] {\r\n        this.arrayOfElements = [];\r\n        this.inOrder(this.firstItem);\r\n        return this.arrayOfElements;\r\n    }\r\n\r\n    private inOrder(node: BinaryTreeNode<T>) {\r\n        if (node != null && node != undefined) {\r\n            this.inOrder(node.getLeft());\r\n            this.arrayOfElements = this.arrayOfElements.concat(node.getValue());\r\n            this.inOrder(node.getRight());\r\n        }\r\n    }\r\n\r\n    public minimum(): BinaryTreeNode<T> {\r\n        return this.minimumOf(this.firstItem);\r\n    }\r\n\r\n    public isEmpty(): boolean {\r\n        return this.firstItem == null;\r\n    }\r\n\r\n    public minimumOf(node: BinaryTreeNode<T>): BinaryTreeNode<T> {\r\n        if (node.getLeft() == null)\r\n            return node;\r\n        return this.minimumOf(node.getLeft());\r\n    }\r\n\r\n    public next(node: BinaryTreeNode<T>) {\r\n        if (node.getRight() != null)\r\n            return this.minimumOf(node.getRight());\r\n        let parent = node.getParent();\r\n        while (parent != null && node == parent.getRight()) {\r\n            node = parent;\r\n            parent = node.getParent();\r\n        }\r\n        return parent;\r\n    }\r\n\r\n    public search(arg: T): BinaryTreeNode<T> {\r\n        return this.recursiveSearch(this.firstItem, this.comparableValue(arg));\r\n    }\r\n\r\n    public searchItem(arg: T): T {\r\n        let node = this.search(arg);\r\n        if (node == null)\r\n            return null;\r\n        return node.getValue();\r\n    }\r\n\r\n    public searchByKey(key: number): T {\r\n        let node = this.recursiveSearch(this.firstItem, key);\r\n        if (node == null)\r\n            return null;\r\n        return node.getValue();\r\n    }\r\n\r\n    private recursiveSearch(node: BinaryTreeNode<T>, key: number): BinaryTreeNode<T> {\r\n        if (node == null)\r\n            return null;\r\n        let nodeKey = node.getKey();\r\n        if (nodeKey == key)\r\n            return node;\r\n        if (key < nodeKey)\r\n            return this.recursiveSearch(node.getLeft(), key);\r\n        else\r\n            return this.recursiveSearch(node.getRight(), key);\r\n    }\r\n\r\n\r\n    public removeNode(arg: BinaryTreeNode<T>) {\r\n        let parentNode = arg.getParent();\r\n        if (parentNode == null) {\r\n            let nextRoot = arg.getRight();\r\n            this.firstItem = nextRoot;\r\n            if (nextRoot != null)\r\n                nextRoot.setParent(null);\r\n        }\r\n        else if (arg.getLeft() == null && arg.getRight() == null) {\r\n            if (parentNode == null) {\r\n                this.firstItem = null;\r\n            }\r\n            if (parentNode.getRight() == arg)\r\n                parentNode.setRight(null);\r\n            if (parentNode.getLeft() == arg)\r\n                parentNode.setLeft(null);\r\n        } else if (arg.getLeft() == null || arg.getRight() == null) {\r\n            if (arg.getLeft() == null) {\r\n                if (parentNode.getLeft() == arg) {\r\n                    parentNode.setLeft(arg.getRight());\r\n                } else {\r\n                    parentNode.setRight(arg.getRight());\r\n                }\r\n                arg.getRight().setParent(parentNode);\r\n            } else {\r\n                if (parentNode.getLeft() == arg) {\r\n                    parentNode.setLeft(arg.getLeft());\r\n                } else {\r\n                    parentNode.setRight(arg.getLeft());\r\n                }\r\n                arg.getLeft().setParent(parentNode);\r\n            }\r\n        } else {\r\n            let successor = this.next(arg);\r\n            arg.setValue(successor.getValue());\r\n            arg.setKey(successor.getKey());\r\n            if (successor.getParent().getLeft() == successor) {\r\n                successor.getParent().setLeft(successor.getRight());\r\n                if (successor.getRight() != null) {\r\n                    successor.getRight().setParent(successor.getParent());\r\n                }\r\n            } else {\r\n                successor.getParent().setRight(successor.getLeft());\r\n                if (successor.getLeft() != null) {\r\n                    successor.getRight().setParent(successor.getParent());\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public removeNodeElement(arg: T) {\r\n        let node = this.search(arg);\r\n        this.removeNode(node);\r\n    }\r\n\r\n    public print() {\r\n        let nodesArray: BinaryTreeNode<T>[] = [];\r\n        nodesArray.push(this.firstItem);\r\n        let consoleRow: string = \"\";\r\n        while (nodesArray.length > 0) {\r\n            consoleRow = \"\";\r\n            let newNodesArray: BinaryTreeNode<T>[] = [];\r\n            for (let i: number = 0; i < nodesArray.length; i++) {\r\n                consoleRow += nodesArray[i].getKey().toString();\r\n                consoleRow += nodesArray[i].getValue().toString();\r\n                consoleRow += \"   \";\r\n                if (nodesArray[i].getLeft() != null)\r\n                    newNodesArray.push(nodesArray[i].getLeft());\r\n                if (nodesArray[i].getRight() != null)\r\n                    newNodesArray.push(nodesArray[i].getRight());\r\n            }\r\n            console.log(consoleRow);\r\n            nodesArray = newNodesArray;\r\n        }\r\n    }\r\n\r\n    [Symbol.iterator]() {\r\n        let node = this.minimum();\r\n        return {\r\n            next(): IteratorResult<BinaryTreeNode<T>> {\r\n                if (node != null && node != undefined) {\r\n                    node = this.next(node);\r\n                    return {\r\n                        done: false,\r\n                        value: node\r\n                    }\r\n                } else {\r\n                    return {\r\n                        done: true,\r\n                        value: null\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default BinaryTree;","import GameObject from \"../GameObjects/GameObject\";\r\nimport MapCoordinates from \"../Engine/MapCoordinates\";\r\nimport BinaryTree from \"../DataStructure/BinaryTree/BinaryTree\";\r\n\r\nclass GameObjectCollection {\r\n    private array: GameObject[];\r\n    private fieldSize: number;\r\n\r\n    constructor(fielSize: number) {\r\n        this.array = [];\r\n        this.fieldSize = fielSize;\r\n    }\r\n\r\n    public getObject(coords: MapCoordinates): GameObject {\r\n        let item = this.array[coords.x + coords.y * this.fieldSize];\r\n        if (item == undefined)\r\n            return null;\r\n        return item;\r\n    }\r\n\r\n    public add(gameObject: GameObject) {\r\n        this.array[gameObject.coordinates.x + gameObject.coordinates.y *this.fieldSize] = gameObject;\r\n    }\r\n\r\n    public removeByCoordinates(coords: MapCoordinates): void {\r\n        this.array[coords.x + coords.y * this.fieldSize] = undefined;\r\n    }\r\n\r\n    public move(from: MapCoordinates, to: MapCoordinates) {\r\n        this.array[to.x + to.y * this.fieldSize] = this.array[from.x + from.y * this.fieldSize];\r\n        this.removeByCoordinates(from);\r\n    }\r\n\r\n    public toArray() : GameObject[] {\r\n        return this.array;\r\n    }\r\n}\r\n\r\nexport default GameObjectCollection;","import Random from \"../Helpers/Random\";\r\nimport MapCoordinates from \"../Engine/MapCoordinates\";\r\nimport Box from \"../GameObjects/Box\";\r\nimport GameObjectCollection from \"./GameObjectCollection\";\r\nimport GameObject from \"../GameObjects/GameObject\";\r\n\r\nclass Field {\r\n    public size: number;\r\n    public gameObjects: GameObjectCollection;\r\n    private htmlSize: number = 600;\r\n    private canvasHtmlElement: HTMLCanvasElement;\r\n    private context: CanvasRenderingContext2D;\r\n    private cellSize: number;\r\n\r\n    public constructor(size: number) {\r\n        this.canvasHtmlElement = <HTMLCanvasElement>document.getElementById(\"field\");\r\n        this.context = this.canvasHtmlElement.getContext(\"2d\");\r\n        this.canvasHtmlElement.setAttribute(\"width\", this.htmlSize.toString());\r\n        this.canvasHtmlElement.setAttribute(\"height\", this.htmlSize.toString());\r\n        this.cellSize = this.htmlSize / size;\r\n\r\n        this.size = size;\r\n        this.gameObjects = new GameObjectCollection(this.size);\r\n    }\r\n\r\n    public randomize() {\r\n        for (let y = 0; y < this.size; y++) {\r\n            for (let x = 0; x < this.size; x++) {\r\n                let r = Random.next(0, 20);\r\n                if (r > 15) {\r\n                    let currCoords = new MapCoordinates(x, y);\r\n                    this.gameObjects.add(new Box(currCoords));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public getObjectByCoordinates(coords: MapCoordinates) : GameObject {\r\n        return this.gameObjects.getObject(coords);\r\n    }\r\n\r\n    public deleteObjectByCoordinates(coords: MapCoordinates) {\r\n        this.gameObjects.removeByCoordinates(coords);\r\n    }\r\n\r\n    public render() {\r\n        this.context.fillStyle = \"#f6f6f6\";\r\n        this.context.fillRect(0, 0, this.htmlSize, this.htmlSize);\r\n        for (let gameObject of this.gameObjects.toArray()) {\r\n            if (gameObject == undefined) {\r\n                continue;\r\n            }\r\n            this.context.fillStyle = gameObject.color;\r\n\r\n            this.fillRect(gameObject.coordinates.x, gameObject.coordinates.y);\r\n        }\r\n    }\r\n\r\n    private fillRect(x: number, y: number) {\r\n        this.context.fillRect(x * this.cellSize, y * this.cellSize, this.cellSize, this.cellSize);\r\n    }\r\n\r\n    public makeWall() {\r\n        for (let y = 0; y < this.size; y++) {\r\n            for (let x = 0; x < this.size; x++) {\r\n                let isWall = 0;\r\n                if (x == Math.round(this.size / 2) && y < Math.round(this.size / 2) ||\r\n                    (y == Math.round(this.size / 2) && x < Math.round(this.size / 2))) {\r\n                    var coords = new MapCoordinates(x, y);\r\n                    this.gameObjects.add((new Box(coords)));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public makeBoxForPlayer() {\r\n\r\n        for (let x = 0; x < this.size / 2; x++) {\r\n            var coords = new MapCoordinates(x, this.size / 2);\r\n            this.gameObjects.add((new Box(coords)));\r\n        }\r\n        \r\n        for (let y = 0; y < this.size / 2; y++) {\r\n            var coords = new MapCoordinates(this.size / 2, y);\r\n            this.gameObjects.add((new Box(coords)));\r\n        }\r\n    }\r\n\r\n    // public showNodes(nodes: PathNode[]) {\r\n    //     for (let node of nodes) {\r\n    //         this.cells[node.getCoordinates().y][node.getCoordinates().x] = 3;\r\n    //     }\r\n    // }\r\n}\r\n\r\nexport default Field;","export const TickInMiliseconds = 100;\r\nexport const FieldSize = 50;","import MapCoordinates from \"../Engine/MapCoordinates\";\r\nimport Field from \"../Environment/Field\";\r\nimport GameObject from \"./GameObject\";\r\n\r\nclass Player implements GameObject {\r\n\r\n    public coordinates: MapCoordinates;\r\n    protected field: Field;\r\n    public color: string = \"green\";\r\n    public isImpenetrable: boolean = true;\r\n\r\n    constructor(coords: MapCoordinates, field: Field) {\r\n        this.coordinates = coords;\r\n        this.field = field;\r\n    }\r\n\r\n    public moveBottom() {\r\n        this.move(\"bottom\");\r\n    }\r\n\r\n    public moveUp() {\r\n        this.move(\"up\");\r\n    }\r\n\r\n    public moveLeft() {\r\n        this.move(\"left\");\r\n    }\r\n\r\n    public moveRight() {\r\n        this.move(\"right\");\r\n    }\r\n\r\n    private move(direction: string) {\r\n        let supposedCoordinates: MapCoordinates;\r\n        switch (direction) {\r\n            case \"up\":\r\n                supposedCoordinates = new MapCoordinates(this.coordinates.x, this.coordinates.y - 1);\r\n                break;\r\n            case \"bottom\":\r\n                supposedCoordinates = new MapCoordinates(this.coordinates.x, this.coordinates.y + 1);\r\n                break;\r\n            case \"left\":\r\n                supposedCoordinates = new MapCoordinates(this.coordinates.x - 1, this.coordinates.y);\r\n                break;\r\n            case \"right\":\r\n                supposedCoordinates = new MapCoordinates(this.coordinates.x + 1, this.coordinates.y);\r\n                break;\r\n            default:\r\n                throw \"direction not parsed\";\r\n        }\r\n\r\n        if (!this.isExisOnTheField(supposedCoordinates))\r\n            return;\r\n\r\n        if (this.field.getObjectByCoordinates(supposedCoordinates) != null)\r\n            return;\r\n\r\n        this.field.gameObjects.move(this.coordinates, supposedCoordinates);\r\n        this.coordinates = supposedCoordinates;\r\n    }\r\n\r\n    private isExisOnTheField(coords: MapCoordinates): boolean {\r\n        return !(coords.x >= this.field.size || coords.y >= this.field.size\r\n            || coords.x < 0 || coords.y < 0);\r\n    }\r\n}\r\n\r\nexport default Player;","import Player from \"../GameObjects/Player\";\r\nimport {TickInMiliseconds} from \"../GlobalVariables\";\r\n\r\nclass ControlManager {\r\n\r\n\r\n    protected isDisabled: boolean;\r\n    private player: Player;\r\n\r\n    constructor(player: Player) {\r\n        this.player = player;\r\n        this.isDisabled = false;\r\n    }\r\n\r\n    public cacthKey(event: KeyboardEvent) {\r\n        if (!this.isDisabled) {\r\n            this.disableTemproary();\r\n            switch (event.code) {\r\n                case \"ArrowLeft\":\r\n                    this.player.moveLeft();\r\n                    break;\r\n                case \"ArrowRight\":\r\n                    this.player.moveRight();\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    this.player.moveBottom();\r\n                    break;\r\n                case \"ArrowUp\":\r\n                    this.player.moveUp();\r\n                    break;\r\n            }\r\n        } else {\r\n            console.log(\"disabled\");\r\n        }\r\n    }\r\n\r\n    private disableTemproary() {\r\n        this.isDisabled = true;\r\n        setTimeout(() => {\r\n            this.isDisabled = false;\r\n        },TickInMiliseconds * 0.3);\r\n    }\r\n}\r\n\r\nexport default ControlManager;","import MapCoordinates from \"./MapCoordinates\";\r\n\r\nclass PathNode {\r\n    private distanceFromStart: number;\r\n    private coordinates: MapCoordinates;\r\n    private cameFrom: PathNode;\r\n    private heuristicDistanceToGoal: number;\r\n\r\n    constructor(coordinates: MapCoordinates, distanceFromStart: number,\r\n                cameFrom: PathNode, goal: MapCoordinates) {\r\n        this.coordinates = coordinates;\r\n        this.distanceFromStart = distanceFromStart;\r\n        this.cameFrom = cameFrom;\r\n        this.heuristicDistanceToGoal = this.getHeuristicDistanceTo(goal);\r\n    }\r\n\r\n    public setCameFrom(cameFrom: PathNode) {\r\n        this.cameFrom = cameFrom;\r\n    }\r\n\r\n    public setDistanceFromStart(distance: number) {\r\n        this.distanceFromStart = distance;\r\n    }\r\n\r\n    public getHeuristicDistanceToGoal(): number {\r\n        return this.heuristicDistanceToGoal;\r\n    }\r\n\r\n    private getHeuristicDistanceTo(coordinates: MapCoordinates): number {\r\n        let distanceToCoordinates =\r\n            Math.abs(coordinates.x - this.coordinates.x) +\r\n            Math.abs(coordinates.y - this.coordinates.y);\r\n        return distanceToCoordinates;\r\n    }\r\n\r\n    public getCoordinates(): MapCoordinates {\r\n        return this.coordinates;\r\n    }\r\n\r\n    public getDistanceFromStart(): number {\r\n        return this.distanceFromStart;\r\n    }\r\n\r\n    public getCamefrom(): PathNode {\r\n        return this.cameFrom;\r\n    }\r\n\r\n    public getFullPath() {\r\n        return this.getHeuristicDistanceToGoal() + this.distanceFromStart;\r\n    }\r\n\r\n    public toString() {\r\n        return this.getCoordinates().toString() + \" distanceFromStart \" + this.distanceFromStart.toString();\r\n    }\r\n}\r\n\r\nexport default PathNode;","class ArrayBinaryTreeNode<T> {\r\n    private key: number;\r\n    private value: T[];\r\n    private parent: ArrayBinaryTreeNode<T>;\r\n    private left: ArrayBinaryTreeNode<T>;\r\n    private right: ArrayBinaryTreeNode<T>;\r\n\r\n    public constructor(argument: T, parent: ArrayBinaryTreeNode<T>, key: number) {\r\n        this.value = [argument];\r\n        this.parent = parent;\r\n        this.key = key;\r\n    }\r\n\r\n    public removeFromValue(arg: T) {\r\n        let index = this.value.findIndex((value)=> {\r\n            return value.toString() == arg.toString();\r\n        });\r\n        if (index != undefined)\r\n            this.value.splice(index, 1);\r\n    }\r\n\r\n    public getParent(): ArrayBinaryTreeNode<T> {\r\n        return this.parent;\r\n    }\r\n\r\n    public  getKey(): number {\r\n        return this.key;\r\n    }\r\n\r\n    public setParent(parent: ArrayBinaryTreeNode<T>) {\r\n        this.parent = parent;\r\n    }\r\n\r\n    public setLeft(argument: ArrayBinaryTreeNode<T>) {\r\n        this.left = argument;\r\n    }\r\n\r\n    public setRight(argument: ArrayBinaryTreeNode<T>) {\r\n        this.right = argument;\r\n    }\r\n\r\n    public getRight(): ArrayBinaryTreeNode<T> {\r\n        return this.right;\r\n    }\r\n\r\n    public getLeft(): ArrayBinaryTreeNode<T> {\r\n        return this.left;\r\n    }\r\n\r\n    public getValue(): T[] {\r\n        return this.value;\r\n    }\r\n\r\n    public setValue(value: T[]) {\r\n        this.value = value;\r\n    }\r\n\r\n    public setKey(value: number) {\r\n        this.key = value;\r\n    }\r\n\r\n    public addValue(arg: T) {\r\n        this.value.push(arg);\r\n    }\r\n}\r\n\r\nexport default ArrayBinaryTreeNode;","import ArrayBinaryTreeNode from \"./ArrayBinaryTreeNode\";\r\n\r\nclass ArrayBinaryTree<T>{\r\n    public firstItem: ArrayBinaryTreeNode<T>;\r\n    private comparableValue: (T: T) => number;\r\n\r\n    public constructor(argument: T, func: (T: T) => number) {\r\n        this.comparableValue = func;\r\n        if (argument != null)\r\n            this.firstItem = new ArrayBinaryTreeNode<T>(argument, null, this.comparableValue(argument));\r\n    }\r\n\r\n    public add(argument: T) {\r\n        let argumentComparableValue = this.comparableValue(argument);\r\n        if (this.firstItem == null || this.firstItem == undefined) {\r\n            this.firstItem = new ArrayBinaryTreeNode<T>(argument, null, argumentComparableValue);\r\n            return;\r\n        }\r\n        let parentNode: ArrayBinaryTreeNode<T> = this.firstItem;\r\n        while (true) {\r\n            if (parentNode.getKey() > argumentComparableValue) {\r\n                if (parentNode.getLeft() == null) {\r\n                    parentNode.setLeft(new ArrayBinaryTreeNode<T>(argument, parentNode, argumentComparableValue));\r\n                    break;\r\n                }\r\n                else {\r\n                    parentNode = parentNode.getLeft();\r\n                }\r\n            }\r\n            else if (parentNode.getKey() < argumentComparableValue) {\r\n                if (parentNode.getRight() == null) {\r\n                    parentNode.setRight(new ArrayBinaryTreeNode<T>(argument, parentNode, argumentComparableValue));\r\n                    break;\r\n                }\r\n                else {\r\n                    parentNode = parentNode.getRight();\r\n                }\r\n            } else {\r\n                parentNode.addValue(argument);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private arrayOfElements: T[];\r\n\r\n    public toArray(): T[] {\r\n        this.arrayOfElements = [];\r\n        this.inOrder(this.firstItem);\r\n        return this.arrayOfElements;\r\n    }\r\n\r\n    private inOrder(node: ArrayBinaryTreeNode<T>) {\r\n        if (node != null && node != undefined) {\r\n            this.inOrder(node.getLeft());\r\n            this.arrayOfElements = this.arrayOfElements.concat(node.getValue());\r\n            this.inOrder(node.getRight());\r\n        }\r\n    }\r\n\r\n    public minimum(): ArrayBinaryTreeNode<T> {\r\n        return this.minimumOf(this.firstItem);\r\n    }\r\n\r\n    public isEmpty(): boolean {\r\n        return this.firstItem == null;\r\n    }\r\n\r\n    public minimumOf(node: ArrayBinaryTreeNode<T>): ArrayBinaryTreeNode<T> {\r\n        if (node.getLeft() == null)\r\n            return node;\r\n        return this.minimumOf(node.getLeft());\r\n    }\r\n\r\n    public next(node: ArrayBinaryTreeNode<T>) {\r\n        if (node.getRight() != null)\r\n            return this.minimumOf(node.getRight());\r\n        let parent = node.getParent();\r\n        while (parent != null && node == parent.getRight()) {\r\n            node = parent;\r\n            parent = node.getParent();\r\n        }\r\n        return parent;\r\n    }\r\n\r\n    public search(arg: T): ArrayBinaryTreeNode<T> {\r\n        return this.recursiveSearch(this.firstItem, this.comparableValue(arg));\r\n    }\r\n\r\n    public searchItem(arg: T, func: (T: T) => boolean): T {\r\n        let node = this.search(arg);\r\n        if (node == null)\r\n            return null;\r\n        let items = node.getValue();\r\n        return items.find(func);\r\n    }\r\n\r\n    public searchByKey(key: number): T {\r\n        let node = this.recursiveSearch(this.firstItem, key);\r\n        if (node == null)\r\n            return null;\r\n        let items = node.getValue();\r\n    }\r\n\r\n    private recursiveSearch(node: ArrayBinaryTreeNode<T>, key: number): ArrayBinaryTreeNode<T> {\r\n        if (node == null)\r\n            return null;\r\n        let nodeKey = node.getKey();\r\n        if (nodeKey == key)\r\n            return node;\r\n        if (key < nodeKey)\r\n            return this.recursiveSearch(node.getLeft(), key);\r\n        else\r\n            return this.recursiveSearch(node.getRight(), key);\r\n    }\r\n\r\n\r\n    public removeNodeElement(arg: T) {\r\n        let node = this.search(arg);\r\n        if (node.getValue().length > 1) {\r\n            node.removeFromValue(arg);\r\n            return\r\n        }\r\n        this.removeNode(node);\r\n    }\r\n\r\n    public removeNode(arg: ArrayBinaryTreeNode<T>) {\r\n        let parentNode = arg.getParent();\r\n        if (parentNode == null) {\r\n            let nextRoot = arg.getRight();\r\n            this.firstItem = nextRoot;\r\n            if (nextRoot != null)\r\n                nextRoot.setParent(null);\r\n        }\r\n        else if (arg.getLeft() == null && arg.getRight() == null) {\r\n            if (parentNode == null) {\r\n                this.firstItem = null;\r\n            }\r\n            if (parentNode.getRight() == arg)\r\n                parentNode.setRight(null);\r\n            if (parentNode.getLeft() == arg)\r\n                parentNode.setLeft(null);\r\n        } else if (arg.getLeft() == null || arg.getRight() == null) {\r\n            if (arg.getLeft() == null) {\r\n                if (parentNode.getLeft() == arg) {\r\n                    parentNode.setLeft(arg.getRight());\r\n                } else {\r\n                    parentNode.setRight(arg.getRight());\r\n                }\r\n                arg.getRight().setParent(parentNode);\r\n            } else {\r\n                if (parentNode.getLeft() == arg) {\r\n                    parentNode.setLeft(arg.getLeft());\r\n                } else {\r\n                    parentNode.setRight(arg.getLeft());\r\n                }\r\n                arg.getLeft().setParent(parentNode);\r\n            }\r\n        } else {\r\n            let successor = this.next(arg);\r\n            arg.setValue(successor.getValue());\r\n            arg.setKey(successor.getKey());\r\n            if (successor.getParent().getLeft() == successor) {\r\n                successor.getParent().setLeft(successor.getRight());\r\n                if (successor.getRight() != null) {\r\n                    successor.getRight().setParent(successor.getParent());\r\n                }\r\n            } else {\r\n                successor.getParent().setRight(successor.getLeft());\r\n                if (successor.getLeft() != null) {\r\n                    successor.getRight().setParent(successor.getParent());\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public print() {\r\n        let nodesArray: ArrayBinaryTreeNode<T>[] = [];\r\n        nodesArray.push(this.firstItem);\r\n        let consoleRow: string = \"\";\r\n        while (nodesArray.length > 0) {\r\n            consoleRow = \"\";\r\n            let newNodesArray: ArrayBinaryTreeNode<T>[] = [];\r\n            for (let i: number = 0; i < nodesArray.length; i++) {\r\n                consoleRow += nodesArray[i].getKey().toString();\r\n                consoleRow += \" [\";\r\n                for (let value of nodesArray[i].getValue()) {\r\n                    consoleRow += value.toString() + \" \";\r\n                }\r\n                consoleRow += \"]\";\r\n                consoleRow += \"   \";\r\n                if (nodesArray[i].getLeft() != null)\r\n                    newNodesArray.push(nodesArray[i].getLeft());\r\n                if (nodesArray[i].getRight() != null)\r\n                    newNodesArray.push(nodesArray[i].getRight());\r\n            }\r\n            console.log(consoleRow);\r\n            nodesArray = newNodesArray;\r\n        }\r\n    }\r\n}\r\n\r\nexport default ArrayBinaryTree;","import PathNode from \"./PathNode\";\r\nimport Field from \"../Environment/Field\";\r\nimport MapCoordinates from \"./MapCoordinates\";\r\nimport ArrayBinaryTree from \"../DataStructure/ArrayBinaryTree/ArrayBinaryTree\";\r\nimport Enemy from \"../GameObjects/Enemy\";\r\n\r\nclass PathFinder {\r\n    private checkedNodes: ArrayBinaryTree<PathNode>;\r\n    private nodesToCheck: ArrayBinaryTree<PathNode>;\r\n    private field: Field;\r\n\r\n    public constructor(field: Field) {\r\n        this.field = field;\r\n    }\r\n\r\n    public getCheckedNodes() {\r\n        return this.checkedNodes;\r\n    }\r\n\r\n    public findPath(from: MapCoordinates, to: MapCoordinates, isIgnoreEnemy: boolean = true) {\r\n        let startNode = new PathNode(from, 0, null, to);\r\n\r\n        this.nodesToCheck = new ArrayBinaryTree<PathNode>(startNode, (node1) => {\r\n            return node1.getFullPath();\r\n        });\r\n        this.checkedNodes = new ArrayBinaryTree<PathNode>(null, (node1) => {\r\n            return node1.getHeuristicDistanceToGoal();\r\n        });\r\n\r\n        while (!this.nodesToCheck.isEmpty()) {\r\n            let currentNode = this.nodesToCheck.minimum().getValue()[0];\r\n\r\n            if (currentNode.getCoordinates().toString() == to.toString())\r\n                return this.getResultPath(currentNode);\r\n\r\n            this.nodesToCheck.removeNodeElement(currentNode);\r\n            this.checkedNodes.add(currentNode);\r\n\r\n\r\n            for (let neighbourNode of this.getNeighbors(currentNode, to, isIgnoreEnemy)) {\r\n                if (this.checkedNodes.searchItem(neighbourNode, (value) => {\r\n                    return value.getCoordinates().toString() == neighbourNode.getCoordinates().toString();\r\n                })) {\r\n                    continue;\r\n                }\r\n\r\n                let processedNode = this.nodesToCheck.searchItem(neighbourNode, (value) => {\r\n                    return value.getCoordinates().toString() == neighbourNode.getCoordinates().toString();\r\n                });\r\n\r\n                if (processedNode == null) {\r\n                    this.nodesToCheck.add(neighbourNode);\r\n                } else {\r\n                    if (processedNode.getDistanceFromStart() > neighbourNode.getDistanceFromStart()) {\r\n                        processedNode.setCameFrom(currentNode);\r\n                        processedNode.setDistanceFromStart(currentNode.getDistanceFromStart());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        console.log(\"not found\");\r\n        return null;\r\n    }\r\n\r\n    public getNeighbors(node: PathNode, to: MapCoordinates, isIgnoreEnemy: boolean): PathNode[] {\r\n        let pathNodesCoordinates: MapCoordinates[] = [];\r\n        let nodeCoordinates = node.getCoordinates();\r\n\r\n        pathNodesCoordinates.push(new MapCoordinates(nodeCoordinates.x, nodeCoordinates.y + 1));\r\n        pathNodesCoordinates.push(new MapCoordinates(nodeCoordinates.x + 1, nodeCoordinates.y));\r\n        pathNodesCoordinates.push(new MapCoordinates(nodeCoordinates.x, nodeCoordinates.y - 1));\r\n        pathNodesCoordinates.push(new MapCoordinates(nodeCoordinates.x - 1, nodeCoordinates.y));\r\n\r\n        let pathNodes: PathNode[] = [];\r\n\r\n        for (let coords of pathNodesCoordinates) {\r\n            if (coords.x < 0 || coords.x >= this.field.size) {\r\n                continue;\r\n            }\r\n            if (coords.y < 0 || coords.y >= this.field.size) {\r\n                continue;\r\n            }\r\n            let objInCoords = this.field.getObjectByCoordinates(coords);\r\n            if (objInCoords != null) {\r\n                if (isIgnoreEnemy && !objInCoords.isImpenetrable)\r\n                    continue;\r\n\r\n                if (!isIgnoreEnemy && (!objInCoords.isImpenetrable || objInCoords instanceof Enemy))\r\n                    continue;\r\n            }\r\n\r\n            pathNodes.push(\r\n                new PathNode(coords, node.getDistanceFromStart() + 1, node, to)\r\n            );\r\n        }\r\n\r\n        return pathNodes;\r\n    }\r\n\r\n    private getResultPath(node: PathNode): MapCoordinates[] {\r\n        let result: MapCoordinates[] = [];\r\n        let currentNode = node;\r\n        while (currentNode != null) {\r\n            result.push(currentNode.getCoordinates());\r\n            currentNode = currentNode.getCamefrom();\r\n        }\r\n        result.reverse();\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default PathFinder;","import MapCoordinates from \"../Engine/MapCoordinates\";\r\nimport GameObject from \"./GameObject\";\r\n\r\nclass DeadMan implements GameObject {\r\n    color: string = \"blueviolet\";\r\n    coordinates: MapCoordinates;\r\n    public isImpenetrable: boolean = false;\r\n\r\n    constructor(coords: MapCoordinates) {\r\n        this.coordinates = coords;\r\n    }\r\n}\r\n\r\nexport default DeadMan;","import MapCoordinates from \"../Engine/MapCoordinates\";\r\nimport PathFinder from \"../Engine/PathFinder\";\r\nimport Field from \"../Environment/Field\";\r\nimport GameObject from \"./GameObject\";\r\nimport {TickInMiliseconds} from \"../GlobalVariables\";\r\nimport DeadMan from \"./DeadMan\";\r\nimport Game from \"../Engine/Game\";\r\n\r\nclass Enemy implements GameObject {\r\n    public isImpenetrable: boolean = true;\r\n    public coordinates: MapCoordinates;\r\n    public color: string = \"red\";\r\n    private path: MapCoordinates[];\r\n    private pathFinder: PathFinder;\r\n    private currentStep: number;\r\n    private field: Field;\r\n    private interval: number;\r\n    public guid:number;\r\n\r\n    constructor(coordinates: MapCoordinates, field: Field) {\r\n        this.coordinates = coordinates;\r\n        this.pathFinder = new PathFinder(field);\r\n        this.field = field;\r\n        this.guid = Math.floor(Math.random()* 1000);\r\n    }\r\n\r\n    public calculatePath(toCoordinates: MapCoordinates, isIgnoreEnemy: boolean = true) {\r\n        this.currentStep = 0;\r\n        this.path = this.pathFinder.findPath(this.coordinates, toCoordinates, isIgnoreEnemy);\r\n        let game = Game.Instance;\r\n        if (this.path == null && game.active) {\r\n            Game.Instance.endGame();\r\n        }\r\n    }\r\n\r\n    public step() {\r\n        if (this.path == null) {\r\n            clearInterval(this.interval);\r\n            return;\r\n        }\r\n        let nextStepCoords = this.path[this.currentStep + 1];\r\n        let nextObject = this.field.getObjectByCoordinates(this.path[this.currentStep + 1]);\r\n        if (nextObject instanceof Enemy || nextObject instanceof DeadMan) {\r\n            console.log(\"there is enemy\");\r\n            return false;\r\n        }\r\n        if (this.currentStep == this.path.length - 2) {\r\n            clearInterval(this.interval);\r\n            this.death();\r\n            console.log(\"dead\");\r\n            return;\r\n        }\r\n        this.field.gameObjects.move(this.coordinates, nextStepCoords);\r\n        this.coordinates = nextStepCoords;\r\n        this.currentStep++;\r\n        return true;\r\n    }\r\n\r\n    public goTo(coords: MapCoordinates) {\r\n        this.calculatePath(coords);\r\n        this.interval = setInterval(this.everyInterval.bind(this), TickInMiliseconds);\r\n    }\r\n\r\n    public follow(obj: GameObject) {\r\n        this.calculatePath(obj.coordinates);\r\n        let oldCoordinates = obj.coordinates;\r\n        this.interval = setInterval(() => {\r\n            if (obj.coordinates.toString() != oldCoordinates.toString()) {\r\n                oldCoordinates = obj.coordinates;\r\n                this.calculatePath(obj.coordinates);\r\n            }\r\n            if (!this.step()) {\r\n                this.calculatePath(obj.coordinates, false);\r\n            }\r\n        }, TickInMiliseconds * 1.5);\r\n    }\r\n\r\n    public kill() {\r\n        clearInterval(this.interval);\r\n        Game.Instance.field.deleteObjectByCoordinates(this.coordinates);\r\n    }\r\n\r\n    private everyInterval() {\r\n        console.log(\"moved\");\r\n        this.step();\r\n    }\r\n\r\n    private death() {\r\n        let deathCoords = this.coordinates;\r\n        this.field.gameObjects.removeByCoordinates(this.coordinates);\r\n        let body = new DeadMan(deathCoords);\r\n        this.field.gameObjects.add(body);\r\n    }\r\n}\r\n\r\nexport default Enemy;","import Field from \"../Environment/Field\";\r\nimport {TickInMiliseconds} from \"../GlobalVariables\";\r\nimport ControlManager from \"./ControlManager\";\r\nimport Enemy from \"../GameObjects/Enemy\";\r\nimport Player from \"../GameObjects/Player\";\r\nimport MapCoordinates from \"./MapCoordinates\";\r\n\r\nclass Game {\r\n    private static _instance: Game;\r\n    public field: Field;\r\n    public endGameCallback: Function;\r\n    public active: boolean = false;\r\n    private enemyCreator: number;\r\n\r\n    public constructor() {\r\n    }\r\n\r\n    public static get Instance() {\r\n        return this._instance || (this._instance = new this())\r\n    }\r\n\r\n    public start() {\r\n        this.active = true;\r\n        this.field.render();\r\n        this.field.makeBoxForPlayer();\r\n        // this.field.randomize();\r\n\r\n        let startPoint = new MapCoordinates(0, 0);\r\n        let endPoint = new MapCoordinates(this.field.size - 1, this.field.size - 1);\r\n\r\n        for (let i = 0; i < this.field.size; i++) {\r\n            this.field.deleteObjectByCoordinates(new MapCoordinates(i, 0));\r\n            this.field.deleteObjectByCoordinates(new MapCoordinates(i, this.field.size - 1));\r\n            this.field.deleteObjectByCoordinates(new MapCoordinates(this.field.size - 1, i));\r\n            this.field.deleteObjectByCoordinates(new MapCoordinates(0, i));\r\n        }\r\n        let player = new Player(endPoint, this.field);\r\n        this.field.gameObjects.add(player);\r\n\r\n        let controlManager = new ControlManager(player);\r\n\r\n        window.onkeydown = (e: KeyboardEvent) => {\r\n            controlManager.cacthKey(e);\r\n        };\r\n        let skip = 0;\r\n        let curr = 0;\r\n        let max = 1;\r\n        this.enemyCreator = setInterval(() => {\r\n            if (curr < max) {\r\n                let enemy = new Enemy(startPoint, this.field);\r\n                this.field.gameObjects.add(enemy);\r\n                enemy.follow(player);\r\n                curr++;\r\n            } else {\r\n                if (skip > max) {\r\n                    curr = 0;\r\n                    max++;\r\n                }\r\n                skip++;\r\n            }\r\n        }, TickInMiliseconds * 10);\r\n\r\n        setInterval(this.update.bind(this), 16);\r\n    }\r\n\r\n    public update() {\r\n        this.field.render();\r\n    }\r\n\r\n    public endGame() :void {\r\n        this.active = false;\r\n        clearInterval(this.enemyCreator);\r\n        for (let object of this.field.gameObjects.toArray()) {\r\n            if (object instanceof Enemy) {\r\n                (<Enemy>object).kill();\r\n            }\r\n        }\r\n        this.endGameCallback();\r\n    }\r\n}\r\n\r\nexport default Game;","import Field from './Environment/Field';\r\nimport Game from './Engine/Game';\r\nimport { FieldSize } from \"./GlobalVariables\";\r\n\r\nlet field = new Field(FieldSize);\r\nlet game = Game.Instance;\r\ngame.field = field;\r\ngame.endGameCallback = () => {\r\n    alert(\"game ended\");\r\n};\r\ngame.start();\r\n","import GameObject from \"./GameObject\";\r\nimport MapCoordinates from \"../Engine/MapCoordinates\";\r\n\r\nclass Track implements GameObject{\r\n    public coordinates: MapCoordinates;\r\n    public color: string = \"blueviolet\";\r\n    public isImpenetrable: boolean = true;\r\n\r\n    constructor(coords: MapCoordinates) {\r\n        this.coordinates = coords;\r\n    }\r\n}\r\n\r\nexport default Track;","class Sleep {\r\n    static sleep(milliseconds: number) {\r\n        let time = new Date().getTime() + milliseconds;\r\n        while (new Date().getTime() <= time) {\r\n        }\r\n    }\r\n}\r\n\r\nexport default Sleep;","class StopWatch {\r\n    private startDate: Date;\r\n    private endDate: Date;\r\n    private result: number;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    public Start() {\r\n        this.startDate = new Date();\r\n    }\r\n\r\n    public end() {\r\n        this.endDate = new Date();\r\n        this.result = this.endDate.getTime() - this.startDate.getTime();\r\n    }\r\n\r\n    public getResult(): number {\r\n        return this.result;\r\n    }\r\n}\r\n\r\nexport default StopWatch;"]}